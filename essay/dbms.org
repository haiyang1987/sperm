* dbms
#+OPTIONS: H:5

数据库系统基础教程
   - 数据库系统世界
   - 关系数据库模型
   - 关系数据库设计理论
   - 高级数据库模型
   - 代数和逻辑查询语言
   - 数据库语言SQL
   - 约束与触发器
   - 视图与索引
   - 服务器环境下的SQL
   - 关系数据库的新课题
   - 半结构化数据模型
   - XML程序设计语言

数据库系统实现
   - DBMS实现概述
   - 数据存储
   - 数据元素的表示
   - 索引结构
   - 多维索引
   - 查询执行
   - 查询编译器
   - 系统故障对策
   - 并发控制
   - 再论事务管理
   - 信息集成

NOTE(dirlt):虽然并发控制和事务管理很重要，但是觉得现在了解一些背景知识不是很多，
并且似乎真实情况下面对于这种东西很少能够用上，大部分的时候只需要简单的事务管理和简单的并发控制即可。
对于这方面的学习打算针对先了解一些实践方面的知识。

** 数据库系统世界
*** DBMS功能
DBMS需要有如下功能：
   - 数据定义语言(data-definition language)建立数据库，它们的模式(schema)就是数据的逻辑结构。
   - 数据操作语言(data-manipulation language)来查询(query)和更新(update)数据库。
   - 支持超大数据量数据的长时间存储(GB,TB,PB),并且在数据查询和更新时支持数据的有效存取。
   - 具有持久性，面对各种故障错误时，数据库的恢复保证数据的一致性。
   - 控制多个用户对数据的同时存取，不允许一个用户的操作影响到另外一个用户(独立性,isolation)，也不允许数据库的不完整操作(原子性,atomicity).

*** DBMS组成
**** 组件概览
在书里面有"数据库管理系统组成"的一个架构图，但是因为不方便贴过来所以这里大致描述一下。不过倒也不用过于依赖这个架构图，架构图只不过是一个意思。
我觉得到没有必要从理解逻辑流的角度来看每个部件，而应该看看每个部件提供的功能分别是什么，然后反过来来看逻辑流。
   - 查询编译器
   - 事务管理器.接收事务命令来转换为执行引擎可以接收的plan.但是通常也需要并发控制，日志恢复的配合。
   - DDL编译器.将DDL进行编译转换称为执行引擎可以接受的plan.
   - 执行引擎.在执行plan的时候需要和日志(比如事务需要首先进行log)以及并发控制器(需要避免一些加锁的数据)之间交互.
   - 日志与恢复.负责事务的持久性.在事务内部可以先将每一个变化都单独记录(log),如果中途失败或者是崩溃的话可以进行回滚,将数据库恢复到原来一直的状态.
   - 并发控制调度器.保证事务的原子性和独立性.调度器可以保证多个事务的单个动作是按照某个次序执行，效果与系统一次只执行一个事务一样。
   - 索引/文件/记录管理器.通过缓冲区管理器提供文件和记录的访问接口.同时它维护了一些索引和位置信息，通过这些信息可以查找到所需要的文件。
   - 缓冲区管理器.通过存储管理器可以在上层进行buffer，实现上可能会包含若干个页面。
   - 存储管理器.控制存储器行为，可以通过操作系统提供接口来完成，但是更加典型的是DBMS直接向磁盘控制器发出命令。

**** 组件交互
各个组件之间可能需要的信息种类包括下面这些：
   - 数据。数据库本身内容。
   - 元数据。描述数据库结构以及约束的数据库模式。
   - 日志记录。对数据库新近修改的信息，该信息支持数据库的持久性。
   - 统计数据。DBMS收集和存储的关于数据特征的数据，比如数据库大小，数据库中的key range等.
   - 索引。支持对数据库中数据有效存取的数据结构。

**** 查询编译器
对于查询编译器需要将查询转换称为查询计划(query plan)的内部形式(对于query plan我们可以使用关系代数来理解).主要由下面三个模块组成:
   - 查询分析器(query parser).从查询的文本结构构造一个查询树状结构
   - 查询预处理器(query preprocessor).对查询树状结构进行语义检查，并且将查询语法树转换称为表示初始查询计划的代数操作符树。
   - 查询优化器(query optimizer).查询优化器将查询初始计划转换称为在实际数据中更有效的操作序列。使用关于数据的元数据和统计数据，来界定那种操作序列最快。

**** 事务处理器
对于事务处理器来说一般会执行下面这些任务：
   - 日志记录(logging).为了保证持久性，数据库的每一个变化都会单独地记录在磁盘上面。而日志管理器可以在事务失败的时候来完成回滚。
   - 并发控制(concurrency control).事务必须单独执行(这点是由原子性的性质来保证的ACID),但是为了可以高效完成，就是并发控制器的工作。典型的并发控制器会通过在数据库的某个片段上面加锁，防止两个事务对同一个数据片进行存取。通过锁会保存在主存的<锁表>中，调度器通过阻止执行引擎对已加锁的数据库内容的存取来影响查询和其他数据库操作。
   - 消除死锁(deadlock resolution).当事务通过调度器获取锁以竞争资源时，系统可能会陷入死锁的状态。事务管理器有责任调解并且删除(回滚或者是终止)一个或者是多个事务，以便其他事务可以继续运行。

*** 事务性质
正确的事务通常应该满足一下ACID性质：
   - A(atomicity).事务的操作要么被全部执行，要么全部不被执行。A set of changes must all succeed or all fail
   - C(consistency).所有数据库中数据之间的联系具有一致性约束，或者是满足一致性期望。所以期望事物能保持数据库的一致性。Changes to data must leave the data in a valid state when the full change set is applied
   - I(isolation).每个事物必须如果没有其他事务在同时执行一样被执行。The effects of a transaction must not be visible until the entire transaction is complete
   - D(durability).一旦事物已经完成，则该事务对数据库的影响永远不会丢失。 After a transaction has been committed successfully, the state change must be permanent.

*** 本书概览
书主要是分三个部分来讨论的：
   - 关系数据库模型。包括函数依赖(functional dependencies)说明一类数据唯一地由另外一个数据确定的形式化描述方法。规范化(normalization)表示用函数依赖和其他形式的依赖改进关系数据库设计的过程。高级的数据库设计方法实体/关系(E/R)模型，统一模型语言(UML)和对象定义语言(ODL)，其目的是在关系DBMS设计实现之前，非形式化地探讨有关设计问题。
   - 关系数据库程序设计。介绍基于袋鼠和逻辑抽象程序设计语言(关系代数和Datalog).讨论关系数据库标准语言SQL包括约束声明，触发器，索引和其他增加性能的结构，事务，数据安全和私有性。
   - 半结构化数据建模和程序设计。Web的无处不在已经使得层次结构数据管理重新获得重视，这是因为Web标准是基于嵌套的标记元素。因为XML和它的模式标记文档类型DTD以及XML模式.讨论XML三种查询语言XPath,XQuery和可扩展的样式表转换语言(XSLT).

** 关系数据模型
*** 数据模型
数据模型(data model)是用于描述数据或信息的标记，通常由三个部分组成：
   - 数据结构(data structure).
   - 数据操作(data operation).
   - 数据约束(data constraint).
现在来说数据库中比较重要和有效的两个数据模型是：
   - 关系数据模型，包括对象关系模型的拓展。(与之相关的操作成为关系代数)
   - 半结构化数据模型，包括XML和相关标准。
其他的数据模型包括：
   - 对象关系模型(object-relational data model).是将面向对象的特征加入到关系模型中，是的数据可以具有结构(层次结构)以及相关联的方法。
   - 层次模型(hierarchical model).类似于半结构化数据模型，是一个基于树结构的模型。缺点是不像现在数据模型那样，它是真正在物理层次上进行操作。
   - 网状模型(network model).它是一种基于图的位于物理层次上的模型。缺陷和层次模型同样，开发者不能在一个较高的层次上写出代码。

*** 关系模型
关系模型中的一些重要概念包括下面这些：我们可以将关系(relation)理解为二维表
   - 属性(attribute).关系的列命名。比如title,year
   - 模式(schema).关系名和其属性集合的组成。比如Movies(title,year).
   - 元组(tuple).记录.比如(Matrix,2000).
   - 域(domain).可以认为是这个属性类型.比如(string,int).
   - 实例(instance).给定关系中元组的集合。通常数据库系统仅仅是维护关系的一个版本，即关系的"当前"元素集合，称为当前实例(current instance).相对应的饿是维护数据历史版本的数据库，因为是已经过时存在的，所以被称为临时数据库(temporal database).
   - 键(key).键有关系的一组属性集组成，通过定义键可以保证关系实例上面任何两个元组的值在定义键的属性集上取值不同。比如(title+year)作为键。键是一种非常基本的约束。

SQL区分三类关系：
   - 存储的关系，称为表(table).它在数据库中存储，用户能够对其元组进行查询和更新。
   - 通过计算来定义的关系，称为视图(view).这种关系不在数据库中存储，它只是在需要的时候被完整地或者部分地构造。
   - 临时表.在执行数据查询和更新时由SQL处理程序临时构造。这些临时表会在处理结束后被删除而不会存在数据库里面。

*** 关系代数
代数查询语言使用的是关系代数。虽然关系代数没有C/Java强大，但是通过对于查询语言做出某些限制，可以获得两个极为有益的回报，非常方便地进行开发以及能够编译产生高度优化的代码。
我们这里看一下关系代数提供的操作。
   - 并(union)
   - 交(intersection)
   - 差(difference)
   - 投影(projection)
   - 选择(selection).
   - 积(product)
   - 连接(join).自然链接(natural join),theta连接(theta join)
   - 重命名(renameing)

*** 关系约束
约束(constraint)即关系模型对于存储在数据库中的数据具有的约束能力。之前提到了键就是一种非常基本的约束。
另外一种常见的约束就是引用完整性约束(referential integrity constraint).引用完整性约束，规定的就是在某个上下文中出现的值也必须在另外一个相关的上下文中出现。
当然还有更多的语义上(应用层面上)的约束，通常这些约束应该是可以在SQL上描述出来的。

** 关系数据库设计理论
人们可以采用很多种方式为一个应用设计关系数据库模式(具体方式的话后面会讨论),但是无论使用何种方式，初始的关系模式通常都需要改进。
尤其在消除冗余方面。一般来说这些问题是由于模式试图将过多的内容合并到一个关系中造成的。幸运的是关系数据库有一个成熟的理论-依赖(dependency).
依赖理论涉及如何构建一个良好的关系数据库模式，以及让一个模式存在缺陷时应该如何改进。我们使用异常(anomaly)来指代一些关系模式中由于存在
某种依赖而导致的问题。这章主要讨论：
   - 函数依赖(functional dependency)是键的泛化，我们可以使用函数依赖来定义关系模式的规范形式，这个过程成为规范化。
   - 多值依赖(multivalued dependency)直观的表示一个条件：关系的一个或者多个属性独立于其他若干个属性。这些依赖也可以导致关系的规范构造和分解以消除冗余。

TODO(dirlt):对于chase,3NF,MVD,4NF其实都不太清楚。但是我猜想应该不会妨碍后面的阅读吧，引入这些概念无非就是指导我们如何更好地设计关系。

*** 函数依赖
关系上的函数依赖(functional dependency,fd)是指"如果属性ABC一致的话，那么DEF属性也必然一致"。形式地极为ABC->DEF,称ABC函数决定DEF.
为什么称之为"函数"依赖呢?，这是因为如果ABC->DEF的话，那么我们可以说存在一个函数f,f(ABC)->DEF.这就是"函数依赖"的由来。

然后我们看看我为什么函数依赖会被认为是键的泛化。我们如何来定义一个键：我们认为满足下面条件的话那么ABC就是关系R的键：
   - ABC属性决定关系所有的其他属性。也可以说，关系R不可能存在两个不同的元组但是具有相同的ABC值。
   - 在ABC的真子集中，没有一个函数能够决定R的其他属性了。也就是说，键必须是最小的(minimal).
键是由函数依赖来决定和定义的。通常一个关系可能会存在多个键，如果是这样的话，通常就要指定其中一个为主键(primary key).而一个包含键的属性集合就叫做超键(superkey).

函数依赖可以进行推导，从若干个FD推导出更多的FD.不过我到是觉得没有特别意思。

函数依赖的推论(Reasoning About Functional Dependency):存在一组规则，根据这些规则可以推出在满足给定FD集合的任意关系实例中，FD X->A成立。
证明FD X->A成立的方法就是计算X的闭包，使用给定FD来扩展X，直到它包含A.

FD集合的最小基本集(Minimal Basis for a set of FD's):对于任何FD集合，至少有一个最小基本集。它是一个和原FD集合等价的FD集合（即两者相互蕴含），
右边是单个属性，而从中取出任一个FD或从左边去除任一个属性后不再和原集合等价。

*** 关系数据库模式设计
我们可以按照下面步骤来细化关系数据库模式
   - 深入细致研究不好的模式设计存在的问题。
   - 引入"分解"的思想，把一个关系模式（若干属性的集合）分解称为两个较小的模式。
   - 接着引入"Boyce-Codd"范式，即BCNF.通过分解得到的小模式必须满足BCNF。

**** 异常
当试图在一个关系中包含过多信息时，产生的问题（如冗余）称为异常(anomaly).异常就是数据库模式存在的问题。通常异常的基本类型有：
   - 冗余(redundancy).信息没有必要地在多个元组中重复。
   - 更新异常(update anomaly).可能修改了某个元组的信息，但是没有改变其他元组中相同信息。
   - 删除异常(deletion anomaly).如果一个值集变成空集，就可能带来丢失信息的副作用。
(dirlt):不过个人感觉主要的问题还是存在数据的redundancy,导致更新会发生不一致的情况).

**** 分解关系
(dirlt):分解可以将关系拆分称为若干个更小的关系，而关系之间通过函数依赖(键)来相互关联。但是分解上我们必须确保关系信息没有任何丢失。

**** Boyce-Codd范式
分解的目的就是将一个关系用于多个不存在异常的关系替换。也就是说，在一个简单的条件下面保证前面讨论的异常不存在，这个条件就是Boyce-Codd范式.
#+BEGIN_EXAMPLE
关系R属于BCNF当且仅当，如果R中非平凡ABC->DEF成立，那么ABC是关系R的超键。
#+END_EXAMPLE
因此BCNF的一个等价描述就是，每个非平凡FD的左边必须包含键。(dirlt):这个似乎有点难于用一种好理解的方式表达出来:(.

*** 第三范式
通过分解关系来细化关系数据库模式，分解之后关系不包括异常，但是可能造成一些坏的结果。分解应当具有三个性质
   - 消除异常(elimination of anomalic).关于异常之前已经提到了。
   - 信息的可恢复(recoverability of information).是否能够从分解后的各个元组中恢复原始关系。通常可以通过将分解后的关系通过自然连接，准确恢复原始关系。任何一个分解都包含了原关系的所有元组，但是如果分解选择不当，则连接结果会包含不属于原来关系的元组。如果能够准确恢复原关系，那么称这个分解是无损连接分解(lossless-join decomposition).通过chase可以来判断一个分解是否具有无损连接性质。
   - 依赖的保持(preservation of dependencies).如果FD的投影在分解后的关系上成立，能否确保对分解后的关系用连接重构获取的原始关系仍然能够满足原来的FD.如果分解可以满足这点的话，那么称这个分解为依赖保持分解(dependency-preserving decomposition).
TODO(dirlt):对于chase以及如何判断无损连接性质完全没有了解.不过我觉得了解也没有太大作用。

但是对于某些关系我们会发现，通过上面的分解方式(关系满足Boyce-Codd范式)，关系可能不会满足<依赖的保持>.所以我们这里放松条件，而这放松的条件就是"第三范式"(third normal form.3NF).
第一范式(first normal form)只是简单地要求每个元组的各分量是原子值，第二范式(second normal form)是3NF的一个限制较少的版本。后面我们第四范式(fourth normal form).
#+BEGIN_EXAMPLE
关于R属于第三范式(third normal form,3NF),如果它满足：
只要ABC->DEF是非平凡FD,那么或者ABC是超键，或者每个属于DEF但是不属于A的属性都是某个键的成员。
#+END_EXAMPLE
如果一个属性是某个键的成员，则常被称为"主属性"(prime).因此3NF的条件可以表述称"对于每个非平凡FD,或者其左边是超键，或者其右边仅由主属性构成".

*** 多值依赖
TODO(dirlt):

*** 第四范式
TODO(dirlt):

第四范式条件本质上是BCNF条件，但是它应用于MVD而非FD.正式定义是
#+BEGIN_EXAMPLE
如果对于R中每个非平凡MVD ABC->DEF. ABC都是超键，那么R属于第四范式(fourth normal form,4NF).
#+END_EXAMPLE

*** 范式联系
包含关系: 4NF->BCNF->3NF

| 性质              | 3NF | BCNF | 4NF |
|-------------------+-----+------+-----|
| 消除FD带来的冗余  | N   | Y    | Y   |
| 消除MVD带来的冗余 | N   | N    | Y   |
| 保持FD            | Y   | N    | N   |
| 保持MVD           | N   | N    | N   |

** 高级数据库模型
我们考虑一个新数据库建立过程。该过程从设计阶段开始，提出并回答存储什么信息，信息元素之间如何关联，假定之间有什么样的约束比如键或者是参考的完整性。
通过这个过程我们建立了<高级数据库模型>.但是因为绝对多数的商业数据库系统使用关系模型，所以我们还需要考虑从<高级数据库模型>如何转换成为<关系数据库模型>.

TODO(dirlt):我觉得这个部分的内容完全可以延后，对于了解数据库系统本质没有太大帮助。

** 代数和逻辑查询语言
首先我们将操作对象从<集合>扩展到<包>,然后给出基于<包>上的更多的关系代数操作。引入一种逻辑描述语言Datalog,允许用户用描述期望的结果形式地
表达查询，而不是像关系代数那样使用算法计算结果。NOTICE(dirlt):实际上你会发现，Datalog基本上就是我们所希望的SQL，而关系代数就是SQL
转换成为的底层执行表达式。

*** 包上的关系操作
所谓包就是多集(multiset)而不是集合，差别就在于同一个元组可以在关系中出现多次。商业DBMS实现的关系都是包而不是集合，因为采用基于包的关系，
一些关系操作的实现效率会更好。

*** 关系代数的扩展操作符
基于包的关系，我们在关系代数上面引入了几种扩展操作符：
   - 消重操作符(duplicated-elimination operator). 把包中的重复元素去掉只保留一份。
   - 聚集操作符(aggregation operator). 应用到关系的属性上面比如求和或者是max.通常配合分组操作符使用。
   - 分组操作符(grouping operator). 根据元组在一个或者多个属性上的值把关系的元组拆分成为"组".
   - 扩展投影(extended projection). 它可以将变量关系的列作为参数进行计算并且产生新的列。
   - 排序算子(sorting operator). 把一个关系变成一个元组的列表，并且根据一个或者多个属性来进行排序。
   - 外连接操作符(outerjoin operator). 连接算符的变体，通过将悬浮元组设置成为null来防止其出现。外连接有两种变体，左外连接(left outerjoin)是左边元组都使用而右边使用null来填充，右外连接(right outerjoin)则恰恰相反。

*** 关系逻辑
这里所说的关系逻辑就是Datalog.如果大家学过prolog的话那么对于datalog不难理解。datalog分为这么几个部分：
   - 谓词(predicate). 比如P(x,y,z).谓词分为扩展谓词(extension predicate)和内涵谓词(intension predicate).扩展谓词的关系存放在数据库中，而内涵谓词的关系由一个或者多个datalog规则计算出来。
   - 算术原子(arithmetic atom). 比如x>y,x>=y.
   - 规则(rule). 包括头部(head),主体(body).而主体由多个称为子目标(subgoal)的原子构成.子目标之间可以使用AND表示逻辑与，NOT表示逻辑非。
比如规则 LongMovie(t,y) <- Movies(t,y,l,g,s,p) AND l>=100. 注意到子目标之间是没有OR的，OR可以通过多个规则来体现。

--------------------
我们这里需要考虑的一个问题就是，如果在使用NOT这个操作时候，是否会使得这个规则没有意义。
   - 如果我们没有办法确定操作的元组，那么必须保证"每个在规则中任意位置出现的变量都必须出现在主体的某些非否定的关系子目标中".那么认为这个规则是<安全>的。
   - 如果我们有限定操作的元组的话，那么则没有关系，因为我们有一个操作集合的约束范围。
NOTICE(dirlt):NOT的安全性问题仅仅是对于理论上讨论Datalog有意义，而在我们实际数据库系统中不需要考虑这个问题。因为我们数据库系统元组都是固定的。
但是在接触到流式计算系统则会发现，NOT这个问题又会出现。在stream processing里面的话，我们可以认为一个时间段的window就是所有数据来解决这个问题。

*** 关系代数和Datalog
这节主要是阐述了关系代数和Datalog之间能力比较。Datalog可以表达递归而关系代数不能得到相应的定义，关系代数有一些扩展操作Datalog没有办法表达。
NOTICE(dirlt):其实我觉得更关注的是Datalog->关系代数的转换。如果Datalog没有表达递归并且是安全的话，那么是可以使用关系代数来定义的。

** 数据库语言SQL
*** SQL简单查询
简单查询形式为SELECT L FROM R WHERE C.
   - 数据源 FROM R.
   - 投影 SELECT L.
   - 选择 WHERE C.(模式匹配)
当然后面可以根据字段或者是表达式进行排序ORDER BY expr [ASC|DESC]

关于选择部分的话，我们有必要说说NULL以及涉及NULL的操作和比较。对空值NULL有许多不同的解释，下面是一些最常见的解释：
   - 未知值(value unknown).知道它有一个值但是不知道是什么，比如一个未知的生日。
   - 不适用的值(value inapplicable).仅仅是占位符，这个值是没有意义的。
   - 保留的值(value withheld).属于某个对象但是无权知道的值。比如未公布的电话号码phone属性为NULL.TODO(dirlt):still confused.
对于NULL的操作和比较：
   - NULL和任何值进行运算操作结果为NULL
   - NULL和任意值进行比较返回UNKNOWN.(TRUE | FALSE).
对于UNKNOWN理解的话，我们可以讲这个值理解为1/2.TRUE==1,FALSE==0.AND之间取结果最小的值，OR之间取较大的值，而NOT为1-x.

*** 多关系查询
多关系查询相当于联合多个关系来做查询。如果遇到关系的字段同名的话，我们可以通过rename或者是显示地写上qualified name来消除歧义。
对于多关系查询解释模型的话有下面三种：
   - 嵌套循环
   - 并行赋值
   - 转换为关系代数
但是针对某些情况这几种解释模型都不能够很好地工作。TODO(dirlt):分析并且加以阐述。

*** 关系代数操作
SQL提供了对应的包并(UNION)，交(INTERSECT)，差(EXCEPT)关系代数操作用在查询结果上面，条件是要求这些查询结果提供的关系具有相同的属性和属性类型列表。
比如(SELECT name,address FROM MovieStar) EXCEPT (SELECT name,address FROM MovieExec). TODO(dirlt):不过好像现实中看到很少这样使用.

*** 子查询
在SQL中，一个查询可以通过不同的方式被用来计算另外一个查询。当某个查询时另外一个查询的部分时，称之为子查询(subquery).
   - 子查询可以返回单个常量，这个常量能在WHERE子句和另外一个常量进行比较。
   - 子查询能返回关系，该关系可以在WHERE子句中以不同的方式使用。EXISTS,IN,ALL,ANY.
   - 子查询形成的关系能出现在FROM子句中，并且后面紧跟该关系元组变量(相当于rename).

*** 关系连接
   - A CROSS JOIN B.等同于<笛卡尔积>
   - A JOIN B ON <expr>. AB做theta连接满足expr这个表达式.
   - A FULL OUTER JOIN B ON <expr>. AB做theta外连接.
   - A LEFT OUTER JOIN B ON <expr>.
   - A RIGHT OUTER JOIN B ON <expr>.
   - A NATURAL JOIN B.对AB中具有相同名字的属性进行自然连接(属性类型必须相同).
   - A NATURAL FULL OUTER JOIN B.对AB进行自然外连接.
   - A NATURAL LEFT OUTER JOIN B.
   - A NATURAL RIGHT OUTER JOIN B.

*** 全关系操作
所谓权关系操作指将关系作为一个整体而不是单个元组或者是一定数量的元组进行操作。
   - 消除重复.SELECT DISTINCE X.实际上从关系中消除重复的代价非常昂贵.
   - 并，交，差的重复。默认情况下面UNION,INTERSECT,EXCEPT是会自动去重的，如果阻止去重的话后面可以加上ALL.
   - 聚集.AVG(x),SUM(x).通常和分组共同使用。
   - 分组.GROUP BY X.(只能够接一个属性).然后在select属性的话对于非分组属性必须添加聚集操作符(这点显而易见).
   - HAVING子句。对于HAVING表达式属性必须和分组SELECT属性满足相同性质，HAVING自己用于选择分组中的部分元组。

这里在讨论一下空值对于分组和聚集的影响：
   - 空值NULL在任何聚集操作中都被忽视。
   - 在分组的时候，空值NULL被作为一般值对待。NOTICE(dirlt):应该是所有的NULL在一起吧?!
   - 除了计数之外，对于空包执行的聚集操作结果为NULL,而COUNT为0.这点和1相关，假设SUM([NULL])的话，因为NULL被忽视所以为空包，那么返回结果是NULL.

*** 数据库更新
数据库更新操作有三种：
   - 插入元组到关系中去。INSERT INTO R(a,b,c) VALUES(u,v,w).当然VALUES部分也可以使用子查询来替换。
   - 从关系中删除元组。DELETE FROM R WHERE C.
   - 修改某个元组的某些字段的值。UPDATE R SET a=u,b=u WHERE C.

*** SQL中的事务
关于事务引入的原因在之前介绍了并且也介绍了事务性质。我们来看看事务使用：
   - START TRANSACTION.开始执行事务。
   - COMMIT.如果希望提交之前执行语句的话。
   - ROLLBACK.如果希望回滚之前执行语句的话。
另外SQL允许我们告诉系统接下来执行的事务是只读事务，SQL系统可以利用这点提高并发。通常多个访问同一数据的只读事务可以并行执行，
但是多个写统一数据的事务不能并行执行。默认情况的话都是SET TRANSACTION READ WRITE(读写事务).SET TRANSACTION READ ONLY(只读事务).

**** 事务隔离层次
事务的隔离层次会影响到该事务可以看到的数据。如果事务T在串行化层次上面执行的话，那么T的执行必须看起来好像所有其他事务要么完全在T
之前运行，要么完全在T之后运行。但是如果一些事务正运行在其他的隔离层次上的话，可以看到的数据是不同的。首先看看几种隔离层次(isolation level)：
   - 可串行化(serializable).事务必须完全在另外一个事务之前或者之后运行。SET TRANSACTION ISOLATION LEVEL SERIALIZABLE.
   - 读未提交(read-uncommited).事务能够读取到其他未提交事务写入的数据。SET TRANSACTION ISOLATION LEVEL READ UNCOMMITED.
   - 读提交(read-commited).只有那些已经提交事务写入的元组才可以被这个事务看到。SET TRANSACTION ISOLATION LEVEL READ COMMITED.
   - 可重复读(repeatable-read).查询得到的每个元组如果在此查询再次执行时必须重现。SET TRANSACTION ISOLATION LEVEL REPEATABLE READ.
TODO(dirlt):需要加深理解.

--------------------

http://www.sqlite.org/lang_transaction.html

在sqlite里面存在三种级别事务：
   - begin <description> transcation
   - deferred 
   - immediate
   - exclusive
#+BEGIN_VERSE
Transactions can be deferred, immediate, or exclusive. The default transaction behavior is deferred. Deferred means that no locks are acquired on the database until the database is first accessed. Thus with a deferred transaction, the BEGIN statement itself does nothing to the filesystem. Locks are not acquired until the first read or write operation. The first read operation against a database creates a SHARED lock and the first write operation creates a RESERVED lock. Because the acquisition of locks is deferred until they are needed, it is possible that another thread or process could create a separate transaction and write to the database after the BEGIN on the current thread has executed. If the transaction is immediate, then RESERVED locks are acquired on all databases as soon as the BEGIN command is executed, without waiting for the database to be used. After a BEGIN IMMEDIATE, no other database connection will be able to write to the database or do a BEGIN IMMEDIATE or BEGIN EXCLUSIVE. Other processes can continue to read from the database, however. An exclusive transaction causes EXCLUSIVE locks to be acquired on all databases. After a BEGIN EXCLUSIVE, no other database connection except for read_uncommitted connections will be able to read the database and no other connection without exception will be able to write the database until the transaction is complete. 
#+END_VERSE

区别还是非常简单的：
   - deferred 延迟上锁。在begin transcation之后其他的连接还可以发起begin transaction. 某个连接发起读操作就创建SHARED lock（之后只是可读，并且必须比RESERVED lock先释放）, 发起写操作就创建RESERVED lock（之后可读可写，但是必须等待其他链接全部释放）
   - immediate 立刻上锁。相当立刻占用RESERVED lock，其他链接可以发起begin trasnaction但是只能够获得SHARED lock，并且和之前一样，必须等待shared lock释放，reversed lock才能够释放。 *NOTE（dirlt）：这点非常实际，因为对于发起SHARED lock而言，肯定希望期间读取的数据不会发生变化*
      *NOTE（dirlt）：似乎如果直接执行SQL语句相当加上immediate transaction*
   - exclusive 排斥上锁。排斥其他连接发起任何transaction，相当于lock table.

** 约束与触发器
在SQL中允许创建"主动"元素的相关内容。主动(active)元素是一个表达式或者语句，该表达式或语句只需要编写一次存储在数据库中，然后在适当的时间执行。主动元素的执行可以是由于某个特定时间引发，如对关系插入元组，或者是当修改数据库的值引起某个逻辑值为真等。在SQL中存在两种"主动"元素分别是约束(完整性约束,integrity constraint)与处触发器。
   - 键约束.如果两个元组键相同的话那么元组必须相同。
   - 外键约束(foreign-key constraint).指一个关系中出现的一个属性或一组属性也必须在另外一个关系中出现。
   - CHECK约束(check constraint).属性或者是元组上的约束。
   - 断言(assertion).关系之间的约束。
   - 触发器(trigger).触发器是主动元素的一种，它在某个特定事件发生时被调用，例如对一个特定关系的插入事件。

*** 约束命名
对于任何约束的话我们都可以为其命名，方式是CONSTRAINT <name<> <constraint-content>.比如
#+BEGIN_EXAMPLE
name CHAR(30) CONSTRAINT hello nameIsKey PRIMARY KEY.
#+END_EXAMPLE
这样hello就是这个CONSTRAINT.我们对约束指定检查时机.默认是立即检查。
   - SET CONSTRAINT hello NOT DEFERRABLE.立即检查.
   - SET CONSTRAINT hello DEFERRABLE INITIALLY DEFERRED.检查被仅仅被推迟到事务提交之前执行。
   - SET CONSTRAINT hello DEFERRABLE INITIALLY IMMEDIAtE.检查在事务每条语句之后都立即执行。
我们允许在ALTER TABLE里面来修改约束包括ADD,DROP.

*** 外键约束
外键约束用于判定一个关系中出现的值也必须在另外一个关系的主键中出现，在SQL中可以将关系中的一个属性或者是属性组声明外键(foreign key),该
外键引用另外一个关系(也可以是同一个关系)的属性(组)(必须是主键).创建外键约束有两种方式
   - 在定义属性时在该属性后面加上REFERENCES <table> (field)
   - 在CREATE TABLE末尾追加声明FOREIGN KEY (field1,field2) REFERNECES <table>(field1,field2).
我们来考虑在进行数据库更新时如果发生外键约束失败情况下面DBMS的处理。<注意这种修改仅仅发生在键所在关系上面，如果发生在引用的关系上面的话，那么全部拒绝>.DBMS有下面几种处理方式：
   - 缺省原则(the default policy)，即拒绝违法更新(reject violating modification).即阻止这个更新的发生。
   - 级联原则(the cascade policy). 在该原则下面，被引用属性(组)的改变被仿造到外键上面。CASCADE.
   - 置空置原则(the set-null policy). 在该原则下面将外键置空。SET NULL
然后也可以选择时机ON DELETE以及ON UPDATE.通常来说，ON DELETE SET NULL ON UPDATE CASCADE.对于外键约束来说的话也可以延迟约束的检查。

*** CHECK约束
CHECK约束包括基于属性的约束(attributed-based CHECK constraint)以及基于元组的约束(tuple-based CHECK constraint).基于属性的约束首先
有一个非NULL约束，使用很简单就是name CHAR(30) NOT NULL.而除此之外，基于属性和基于元组的约束表达上非常相似。比如下面
#+BEGIN_EXAMPLE
#基于元组约束
CREATE TABLE R( name CHAR(30) PRIMARY KEY, gender CHAR(1), CHECK (gender='F' or name NOT LIKE 'Ms.%'))
#基于属性约束
CREATE TABLE R( name CHAR(30) PRIMARY KEY, gender CHAR(1), CHECK (gender='F'))
#+END_EXAMPLE
注意CHECK约束仅仅是在这个关系的元组发生变化时候才会触发检查，如果其他关系而造成这个CHECK约束失败的话是不会触发检查的。也就是说
CHECK约束仅仅是针对某一个关系的而不是针对于数据库的。如果需要针对数据库进行检查的话，那么可以使用断言。

*** 断言
公平地说触发器可以完成断言的功能，因为触发器是DBMS作为通用目的主动元素，可以说断言是触发器的特化。但是断言非常便于程序员使用，
然后而断言的有效实现非常地困难。断言就是SQL逻辑表达式，并且总是为真。
   - CREATE ASSERTION <name> CHECK <condition>
   - DROP ASSERTION <name>
下面是CHECK约束和断言的差异
| 约束类型      | 声明位置       | 动作时间                     | 确保成立               |
|---------------+----------------+------------------------------+------------------------|
| 基于属性CHECK | 属性           | 对关系插入元组或者是属性修改 | 如果是子查询则不能确保 |
| 基于元组CHECK | 关系模式元素   | 对关系插入或者是属性修改     | 如果是子查询则不能确保 |
| 断言          | 数据库模式元组 | 对任何提及的关系做改变时     | 是                     |

*** 触发器
触发器有时候也被称为事件-条件-动作规则(event-condition-action rule)或者是ECA规则。程序员可以选择动作执行的方式：
   - 一次只针对一个更新元组(row-level trigger,行级触发器)
   - 一次针对在数据库操作中被改变的所有元组(statement-level trigger,语句级触发器).通过一个SQL更新语句影响多个元组。
通过一个例子来稍微分析一下吧.NOTICE(dirlt):触发器这个概念比较好理解，但是具体使用的话应该有比较多的细节。
#+BEGIN_EXAMPLE
CREATE TRIGGER X # 创建触发器
AFTER UPDATE OF y ON R #这里可以是AFTER,BEFORE以及INSTEAD OF(视图里面会提及到). 可以是UPDATE OF(可以指定属性)/INSERT/DELETE(只能和元组相关)
REFERENCING
  OLD ROW AS OldTuple # 如果是UPDATE可以有前后的ROW.如果是INSERT那么只有NEW ROW.如果是DELETE那么只有OLD ROW.
  NEW ROW AS NewTuple
FOR EACH ROW # 如果是FOR_EACH STATEMENT那么就是语句级触发。对于语句触发的话可以使用OLD TABLE和NEW TABLE来引用。
WHEN (OldTuple.y > NewTuple.y) # 如果想执行多条语句的话那么需要使用BEGIN/END来包括，语句之间使用;来分隔。
 UPDATE R
 SET y = OldTuple.y
 WHERE z = '007'
#+END_EXAMPLE

注意触发器的动作也算是事务本身的一部分。事务的范围可能由于数据库模式中存在触发器或者其他主动元素而受到影响。
如果事务中包括修改动作，而这个动作导致一个或者是多个触发器被激发的话，那么触发器的动作也是事务的一部分。
在某些系统中，触发器可以级联，其结果是一个触发器激发另外一个触发器。如果这样，那么所有这些动作都成为那些触发
这一系列触发器的事务的一部分。

** 视图与索引
*** 虚拟视图
虚拟视图是由其他关系上的查询所定义的一种关系。虚拟视图并不在数据库中进行存储，但是可以对其进行查询，就好像它确实被存在数据库总一样。
查询处理器也会在执行查询时用视图的定义来替换视图。CREATE VIEW <name> AS <视图定义>可以用来创建视图。视图看上去像是table所以用户可能想进行insert/update/delete.
不过因为视图本身就是一个虚拟table,所以进行更新操作陷阱会比较多.NOTICE(dirlt):虽然书上面给出了在视图上面的更新操作，
但是我觉得为了简化我们的理解以及使用最好就先定视图只允许查询。当然我们可以删除视图DROP VIEW <name>.另外大部分情况下面如果我们确实想更新视图的话，
其实只是想更新真实表，我们可以使用触发器INSTEAD OF来截获对于视图本身的修改。

*** 物化视图
接着我们来看看物化视图(materialize view)这个概念。对于虚拟视图而言的话，每次查询底层查询解释器都会翻译称为子查询，效率无疑很低。
如果我们可以将这个虚拟视图存储下来，并且维护好这个视图和原始table之间的关系，那么就能够提高效率了。所谓的物化就是在任何时间都保存它的值，
当基本表发生变化时，每次必须重新计算部分物化视图，因此维护物化视图也需要一定的代价。
NOTICE(dirlt):从书中了解到物化视图可以不用立即更新，而可以推迟更新时间。同时不用全量更新只需要增量更新。

*** 索引
索引就是一种特殊的物化视图，使用索引可以使得查询速度加快。但是不像普通的物化视图一样我们需要显式地区使用，DBMS会自动使用索引。创建索引
非常简单CREATE INDEX <name> ON R(f1,f2).而删除索引的话DROP INDEX <name>.通常来说我们倾向于在关系的键上面创建索引。对于索引来说，
我们需要考虑到索引带来的性价比，因为索引本身通常也会存放在磁盘上面。因此正确地选择索引对于优化查询是非常重要的。

** 服务器环境下的SQL
TODO(dirlt):

** 关系数据库的新课题
TODO(dirlt):

** 半结构化数据模型
半结构化数据(semistructured-data)模型在数据库系统中有独特的地位：
   - 它是一种适于数据库集成(integration)的数据模型，也就是说，适用于描述包含在两个或者多个数据库(这些数据库含有不同模式的相似数据)中的数据。
   - 它是一种标记服务的基础模型，用于在Web上共享信息。
半数据化结构相对于固定模型来说响应查询性能较差，但是我们对其感兴趣的动机在于它的灵活性。因为半数据化是自描述的(self-describing).
它自身携带了关于其模式的信息，并且这样的模式可以随时间在单一数据库内任意改变。

半结构化最典型的例子就是XML(Extensible Markup Language).我们这里对XML不打算更进一步地进行描述。为了让计算机能够自动处理XML文档，
让文档有类似于模式的信息则非常有帮助，比如每个标签的元素类型是什么以及标签之间是如何相互嵌套的。而这个模式的描述则成为文档类型定义
DTD(Document Type Definition).而XML模式(XML Schema)则是另外一种为XML文档提供模式的方法，它的功能比DTD更加强大，给模式设计者提供更多的功能。

** XML程序设计语言
对于数据模型的话除了数据结构之外，还需要提供数据定义以及数据查询的功能。因为半结构化数据模型本身就是自描述的，所以没有特殊的数据定义。
所以我们这里看看在半结构化数据模型上的数据查询。同样我们以XML为例来了解几种数据查询与操作方法：
   - XPath.XPath是一种通过路径表达的方式来获取数据(可以得到一个元素，或者是一个子XML文档).路径表示内部提供了丰富的功能。
   - XQuery.XQuery可以说是XPath的超集，在XPath上面定义了更多的逻辑表达能力，支持变量，循环控制等，应该是turing-complete的。
   - XLST(Extensible Stylesheet Language Transformations)允许对XML文档进行转换。
** DBMS实现概述
关于DBMS实现上面大概分为下面三个部分的内容：
   - 存储管理，包括存储器的层次结构，数据元素的存储方式，索引和多维索引。
   - 查询处理，包括如何执行查询，查询编译器和优化器的结构。
   - 事务处理，包括讨论如何支持事务的持久性，并发控制，以及分布式环境下的事务。
   - 信息集成，对于不同数据源的管理能力。

** 数据存储
*** 存储介质层次结构
首先看看存储介质的层次结构(以现在为准2012.5.30)
| 介质           | 介绍                                     | 典型大小 | 访问时间 |
|----------------+------------------------------------------+----------+----------|
| 高速缓冲处理器 | 通常所说的CPU Cache(L1/L2/L3)            | 64MB     | 5ns      |
| 主存储器       | 通常所说的内存RAM                        | 32GB     | 100ns    |
| 虚拟存储器     | 实际上就是二级存储器，和主存储器之间通信 |          |          |
| 二级存储器     | 通常所说的硬盘包括磁盘或者是SSD          | 1TB      | 10ms     |
| 三级存储器     | 通常所说的磁带等介质                     | 1PB      | 10s      |

虚拟存储器是将二级存储器划分成为多个block.和主存储器之间移动数据是按照系统page来移动的
(通常要求系统使用页式内存管理系统).通常page size在4KB左右。

主存储器为访问任何数据提供的访问时间是不变的，磁盘访问任何数据的时间差别仅为一个很小的因数
(因为盘面转速和磁头移动速度相对来说也比较快)，而三级存储设备的访问时间是一个很宽的范围，
这取决于数据与读写点靠得有多近。

*** 磁盘结构
对于磁盘结构的话我们有一个大致的概念即可。磁盘分为磁盘组合(disk assembly)和磁头组合(head assembly).
磁盘组合由一个或者是多个圆形的盘片(platter)组成，围绕着一根中心主轴旋转。圆盘的上下表面涂覆了一层
很薄的磁性材料，二进制位被存储在这些磁性材料上面。0由在一个方向上定向磁化的小区域表示，1则由在
相反方向上定向磁化的小区域表示。而磁头组合的话则是由多个磁头组成，每个盘面上有一个磁头，极其贴近
地悬浮在盘面上，但是绝对不与盘面接触。磁头读出经过它下面的盘面的磁方向，也能改变其磁方向，以便在磁盘上写信息。
各个磁头被固定在一个磁头臂上，所有盘面的磁头随着磁头臂一同一进一出，磁头臂是固定的磁头组合的一部分。

对于盘片(platter)的话是这么进行组织的。一盘片通常存在两个盘面。然后很多个盘片叠起来形成磁盘(
但是中间是存在空闲的以便磁头可以在盘面上操作).从垂直方向看得话，磁头组合所在盘面的位置形成柱面(cylinder).
每个盘面上有很多同心圆称为磁道(track),磁道由许多点组成，每个点代表一个由它的磁化方向决定的二进制位。
同时每个盘面也被划分称为多个扇区(sector).扇区之间通过间隙(gap)隔开。通常gap占据磁道的10%左右，
用于帮助标识扇区的起点。就读写磁盘而言，扇区是不可分割的单位，就磁盘错误而言，它也是一个不可分割的单位。
倘若一个磁化层被以某种方式损坏的话，以致于它不能在存储信息，那么那些包含这个部分的整个扇区也不再能使用。

*** 访问效率
磁盘控制器(disk controller)则是用来管理一个或者是多个磁盘驱动器。磁盘控制器是一个小处理器，完成下面功能：
   - 将磁头组合移动到某一个半径上面(也就是某一柱面上面).寻道时间(seek time)
   - 选择准备读写的盘面和扇区，并且旋转磁盘组合主轴。旋转时间(rotate time)
   - 读二进制数据到主存储器，或者是将主存储器数据写入。传输时间(transfer time)
通常磁盘的磁道数非常少，寻道时间在10ms左右。旋转时间需要考虑磁盘的RPM通常在5400,7200左右，
对应的旋转时间平均在10ms左右。对于磁盘顺序操作带宽在50MB/s.

为了改善访问效率，通常有下面几个策略：
   - 将一起被访问的块放置在同一柱面上。
   - 在几个较小的磁盘上分派数据，而不是集中在一个大的磁盘上。使用更多的可独立访问块的磁头组合。
   - "镜像"磁盘.NOTICE(dirlt):这个需要磁盘控制器和调度算法的配合才能加快读写速度。
   - 修改磁盘调度算法.
   - 使用主存储器进行cache.

*** 磁盘故障
磁盘故障分为下面几种类型：
   - 间断性故障。读写扇区某次没有成功但是反复尝试可以成功。
   - 介质损坏。一个或者是多个二进制位永久地损坏，不能够正确读取扇区。
   - 磁盘崩溃。整个磁盘变为永久不可读。
对于间断性故障来说的话我们需要一种机制来区分是否读取成功。这个机制可以是驱动内置的，也可以是在
应用层面完成的。机制实现上可以有奇偶校验这样的方式。对于介质损坏来说，我们需要用来修复二进制位，
机制实现上也可以使用奇偶校验(但是只能够识别1个bit错误)或者是使用hamming code来做纠错。而磁盘崩溃的话
可以采用RAID技术来解决。在RAID里面也会使用到奇偶校验或者是hamming code纠错实现。

关于RAID在arstechnica上面阅读了一篇文章，写得非常详细，我也稍微总结了一下 http://dirlt.com/blog/?p=1992 也可以看[[file:raid.org][这里]]

** 数据元素表示
TODO(dirlt):

** 索引结构
TODO(dirlt):

** 多维索引
在多维上面建立索引需要考虑下面需求：
   - 部分匹配查询
   - 范围查询(部分)
书里面给出了几个多维索引数据结构
   - 网格文件。过于抽象.
   - 分段散列函数.比较难实现，对于范围查询不好。
   - 多键索引。比较难实现，对于部分匹配查询不好。
   - kd树(kd树时间非常简单，采用多叉比较树结构但是相邻的level之间使用不同的dimension)。
   - 四叉树。书里面介绍过于简单。
   - R树。过于抽象，但是觉得可能会比较靠谱。
猜测现实系统可能基于kd tree或者是R tree来实现多维索引。

** 查询执行
TODO(dirlt):

** 查询编译器
TODO(dirlt):

** 系统故障对策
关于数据库系统的故障可以分为下面几种：
   - 错误数据输入。这点可以从程序和数据库约束本身进行检查校验。
   - 介质故障。这点之前谈过解决办法包括RAID模式，备份和冗余拷贝。
   - 灾难性故障。这点和介质故障解决办法类似，但是且不能使用RAID模式。
   - 系统故障。最主要的问题就是针对事务问题。事务在执行的时候发生断电或者是程序异常终止等情况导致事务状态丢失。
这章注重讨论最后一种事务执行中出现故障的解决对策。具体解决办法依赖于日志，包括下面三种日志：
   - undo log
   - redo log
   - undo/redo log
针对每种log都会谈论如何记录，如何恢复，如何做检查点(checkpoint，可以抛弃日志中旧的不再需要的部分).

*** undo
所谓undo log非常好理解，就是如果出现系统故障的话，那么将所有原先对于数据库的修改恢复原值。我们首先定义下面几个日志：
   - <start T>.开始一个事务T
   - <commit T>.完成一个事务T.
   - <abort T>.终止一个事务T.
   - <T,x,v>.事务T修改了数据库元素x,而x原值是v.

对于undo log的操作需要满足下面两个约束：
   - 如果事务T修改了数据库元素x,那么必须在将x的新值刷新到磁盘前，将<T,x,v>写入到磁盘。
   - 如果事务T一旦完成提交(事务对于所有数据库元素修改不必反映到磁盘)，那么必须尽快提交<commit T>

针对undo log的日志恢复也比较简单。对于日志的话需要扫描两次。第一次观察发起了哪些事务，确定哪些事务存在
commit哪些事务存在abort。另外还有一些事务没有abort的话那么需要在log尾部加上abort.第二次扫描针对abort的日志T',
如果存在<T',x,v>的话，那么将数据库元素修改为v.

*** redo
TODO(dirlt):

*** undo/redo
TODO(dirlt):

** 并发控制
TODO(dirlt):

** 再论事务管理
TODO(dirlt):

** 信息集成
信息集成有三种最常用的方式：
   - 联邦数据库。数据源是独立的，但是一个数据源可以访问其他数据源信息。
   - 数据仓库。将不同的数据源做格式转换合并到某一个独立的数据源里面。
   - Mediation.将用户的查询翻译成为多个数据源的查询然后将结果整合。


