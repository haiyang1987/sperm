%{

#include <cstdio>
#include <string>
#include "common/logger_inl.h"
#include "nasty/nasty.h"
using namespace sperm::nasty;

union YYSTYPE;
struct YYLTYPE;
int yylex(YYSTYPE* yylval, YYLTYPE* yylloc, void* scanner, Parser* parser);
void yyerror(YYLTYPE* yylloc, void* scanner, Parser* parser, const char* msg);

%}

%union {
sperm::nasty::Atom* atom_;
sperm::nasty::Expr* expr_;
}

%token <atom_> LBRACE RBRACE ID DBL INT SR
%type <atom_> atom
%type <expr_> expr
%defines
%locations
%output "nasty.y.cc"
%define api.pure
%lex-param {void* scanner}
%lex-param {Parser* parser}
%parse-param {void* scanner}
%parse-param {Parser* parser}

%start program

%%
program : expr { parser->setExpr($1); }
;

expr : expr atom { $1->appendAtom($2); $$ = $1; }
| atom { $$ = new(std::nothrow) Expr(); $$->appendAtom($1); }
;

atom : LBRACE expr RBRACE { SPERM_DEBUG("match (...)"); $$ = new(std::nothrow) Atom($2); }
| ID { SPERM_DEBUG("match ID"); $$ = $1; }
| DBL { SPERM_DEBUG("match DBL"); $$ = $1; }
| INT { SPERM_DEBUG("match INT"); $$ = $1; }
| SR { SPERM_DEBUG("match SR"); $$ = $1; }
;


%%

void yyerror(YYLTYPE* yylloc, void* scanner, Parser* parser, const char* msg) {
  SPERM_FATAL("parse file(%s:%d:%d-%d:%d) failed(%s)", parser->f().c_str(), yylloc->first_line, yylloc->first_column, 
    yylloc->last_line, yylloc->last_column, msg);
}
